//ALL REQUEST PROTOS SHOULD INCLUDE A MinimumUserProto AS REQUIRED that represents which client sent it/triggered it 

import "Info.proto";

package com.lvl6.proto;

option java_outer_classname = "EventProto";

message ChatRequestProto {
    required MinimumUserProto sender = 1; 
	repeated MinimumUserProto recipients = 2;
	required string message = 3;
}

message ChatResponseProto {
    required MinimumUserProto sender = 1; 
	required string message = 2;
}

message BattleRequestProto {
    required MinimumUserProto attacker = 1; 
    required MinimumUserProto defender = 2; 
}

message BattleResponseProto {
    required MinimumUserProto attacker = 1;
    required MinimumUserProto defender = 2;
	required BattleStatus status = 3;

	optional int32 winnerUserId = 4;
	optional int32 coinsGained = 5;
	optional MinimumEquipProto equipGained = 6;
    optional int32 expGained = 7;
    optional int32 winnerHealthLoss = 8;
    optional int32 loserHealthLoss = 9;
    
    
    enum BattleStatus {
		SUCCESS = 0; 
		ATTACKER_NOT_ENOUGH_HEALTH = 1;
		DEFENDER_NOT_ENOUGH_HEALTH = 2;
		ATTACKER_NOT_ENOUGH_STAMINA = 3;
	} 
}

message VaultRequestProto {
   enum VaultRequestType {
		DEPOSIT = 0; 
		WITHDRAW = 1;
	} 
	required MinimumUserProto sender = 1;
	optional VaultRequestType requestType = 2;
	optional int32 amount = 3;
}

message VaultResponseProto {
	required MinimumUserProto sender = 1;
	optional int32 vaultAmount = 2;
	optional int32 coinAmount = 3;
}

message ClericCostCalculateRequestProto {
	required MinimumUserProto sender = 1;
}

message ClericCostCalculateResponseProto {
	required MinimumUserProto sender = 1;
	optional int32 cost = 2;
}

message ClericHealRequestProto {
	required MinimumUserProto sender = 1;
	optional int32 cost = 2;
}

message ClericHealResponseProto {
	required MinimumUserProto sender = 1;
	optional HealStatus status = 2;
	
	enum HealStatus {
		SUCCESS = 0; 
		USER_NOT_ENOUGH_VAULT = 1;
		OTHER_FAIL = 2;
	} 
}

message StartupRequestProto {
     required string udid = 1;
     required float versionNum = 2;	//1.0->2.0 critical, 1.0->1.1 minor. server checks db for latest vnum
}

message StartupResponseProto {
     required FullUserProto sender = 1;
     optional int32 maxCityIdAccessibleToUser = 2;     //cityids must be in order of min_level
     repeated MinimumUserStructureProto structures = 3;
     required bool updateAvailable = 4;		
}

message RetrieveTasksForCityRequestProto {
     required MinimumUserProto sender = 1;
     optional int32 cityId = 2;
}

message RetrieveTasksForCityResponseProto {
     required MinimumUserProto sender = 1;
     repeated FullTaskProto tasks = 2;
}

message LevelUpResponseProto {
     required FullUserProto sender = 1;
     optional int32 maxCityIdAccessibleToUser = 2;
}
