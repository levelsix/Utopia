//ALL REQUEST PROTOS SHOULD INCLUDE A MinimumUserProto AS REQUIRED that represents which client sent it/triggered it 

import "Info.proto";

package com.lvl6.proto;

option java_outer_classname = "EventProto";

//------------------------------------------------------------------------------------------

																						//DONE
message ChatRequestProto {
    required MinimumUserProto sender = 1; 
	repeated MinimumUserProto recipients = 2;
	required string message = 3;
}

																						//DONE
message ChatResponseProto {
    required MinimumUserProto sender = 1; 
	required string message = 2;
}

//------------------------------------------------------------------------------------------

																						//DONE
message BattleRequestProto {
    required MinimumUserProto attacker = 1; 
    required MinimumUserProto defender = 2; 
}

																						//DONE
message BattleResponseProto {
    required MinimumUserProto attacker = 1;
    required MinimumUserProto defender = 2;
	required BattleStatus status = 3;

	optional int32 winnerUserId = 4;
	optional int32 coinsGained = 5;
	optional MinimumEquipProto equipGained = 6;
    optional int32 expGained = 7;
    optional int32 winnerHealthLoss = 8;
    optional int32 loserHealthLoss = 9;
    
    
    enum BattleStatus {
		SUCCESS = 0; 
		ATTACKER_NOT_ENOUGH_HEALTH = 1;
		DEFENDER_NOT_ENOUGH_HEALTH = 2;
		ATTACKER_NOT_ENOUGH_STAMINA = 3;
		LEVEL_DIFFERENCE_TOO_HIGH = 4;
		OPPONENT_ON_SAME_SIDE = 5;
	} 
}

//------------------------------------------------------------------------------------------

																						//DONE
message VaultRequestProto {
   enum VaultRequestType {
		DEPOSIT = 0; 
		WITHDRAW = 1;
	} 
	required MinimumUserProto sender = 1;
	optional VaultRequestType requestType = 2;
	optional int32 amount = 3;
}

																						//DONE
message VaultResponseProto {
	required MinimumUserProto sender = 1;
	optional int32 vaultAmount = 2;
	optional int32 coinAmount = 3;
}

//------------------------------------------------------------------------------------------

																						//DONE
message ClericHealRequestProto {
	required MinimumUserProto sender = 1;
}

																						//DONE
message ClericHealResponseProto {
	required MinimumUserProto sender = 1;
	optional int32 cost = 2;
	optional HealStatus status = 3;
	
	enum HealStatus {
		SUCCESS = 0; 
		USER_NOT_ENOUGH_VAULT = 1;
		OTHER_FAIL = 2;
	} 
}

//------------------------------------------------------------------------------------------

message StartupRequestProto {				//client will also send ChangeUserLocationRequestProto
     required string udid = 1;
     required float versionNum = 2;	//1.0->2.0 critical, 1.0->1.1 minor. server checks db for latest vnum
}

message StartupResponseProto {
     optional FullUserProto sender = 1;
     required StartupStatus status= 2;
     optional int32 maxCityIdAccessibleToUser = 3;     //cityids must be in order of min_level
     optional MinimumUserStructureProto structures = 4;
     required bool updateAvailable = 5;
     optional int32 questLog = 6;  
     optional LocationProto userLocation = 7;
     
	enum StartupStatus {
		USER_IN_DB = 0; 
		USER_NOT_IN_DB = 1;
	}    
}

//------------------------------------------------------------------------------------------
//CALLED: AFTER THE TUTORIAL

message UserCreateRequestProto {
     required string udid = 1;
     repeated MinimumUserStructureProto structures = 2;
     required LocationProto userLocation = 3;						
     required CoordinateProto aviaryCoordinates = 4;
     required CoordinateProto refineryCoordinates = 5;
     required CoordinateProto carpenterCoordinates = 6;     
     optional int32 referrerCode = 7;
}

message UserCreateResponseProto {
	required FullUserProto sender = 1;
	required StartupStatus status = 2;
	
    enum StartupStatus {
		SUCCESS = 0; 
		FAIL = 1;
	}  
}

//------------------------------------------------------------------------------------------

message ChangeUserLocationRequestProto {
     required MinimumUserProto sender = 1;
     optional int32 cityId = 2;
     required LocationProto userLocation = 3;    
}

//------------------------------------------------------------------------------------------

																						//DONE
message RetrieveTasksForCityRequestProto {
     required MinimumUserProto sender = 1;
     optional int32 cityId = 2;
}

																						//DONE
message RetrieveTasksForCityResponseProto {
     required MinimumUserProto sender = 1;
     repeated FullTaskProto tasks = 2;
}

//------------------------------------------------------------------------------------------

																						//DONE
message TaskActionRequestProto {
	required MinimumUserProto sender = 1;
	required int32 taskId = 2;
}

																						//DONE
message TaskActionResponseProto {
	required MinimumUserProto sender = 1;
	required TaskActionStatus status = 2;
	optional bool taskCompleted = 3;
	optional bool cityRankedUp = 4;
	optional int32 lootEquipId = 5;
	optional int32 coinsGained = 6;
	
	optional int32 coinBonusIfCityRankup = 7;
	optional int32 expBonusIfCityRankup = 8;
	
	enum TaskActionStatus {
		SUCCESS = 0; 
		USER_NOT_ENOUGH_ENERGY = 1;
		USER_NOT_ENOUGH_ARMY = 2;
		USER_NOT_ALL_REQUIRED_ITEMS = 3;
		INVALID_TASK_ID = 5;
	} 
}

//------------------------------------------------------------------------------------------

message PurchaseStructureRequestProto {
	required MinimumUserProto sender = 1;
	required CoordinateProto structCoordinates = 2;
	required int32 structId = 3;
}

//------------------------------------------------------------------------------------------

message PlaceCriticalStructureRequestProto {
	required MinimumUserProto sender = 1;
	required CoordinateProto critStructCoordinates = 2;
	required int32 critStructId = 3;
}

//------------------------------------------------------------------------------------------

message MoveCriticalStructureRequestProto {
	required MinimumUserProto sender = 1;
	required CoordinateProto critStructCoordinates = 2;
	required CritStructType critStruct = 3;
	
	enum CritStructType {
		AVIARY = 1;
		LUMBERMILL = 2;
		CARPENTER = 3;
		VAULT = 4;
		ARMORY = 5;
		CLERIC = 6;
	}
}

//------------------------------------------------------------------------------------------

message MoveUserStructureRequestProto {
	required MinimumUserProto sender = 1;
	required CoordinateProto oldStructCoordinates = 2;
	required CoordinateProto curStructCoordinates = 3;
	required int32 structId = 4;
}

//------------------------------------------------------------------------------------------

message LevelUpResponseProto {
     required FullUserProto sender = 1;
     optional int32 maxCityIdAccessibleToUser = 2;
}

